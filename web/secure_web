##### HTTP 보안 헤더 설정
1. Content-Security-Policy
XSS과 연관된 공격의 피해를 최소화 할 수 있으며, 스크립트를 허용할 url(신뢰할 수 있는 url)을 헤더에 설정하는 옵션
 - Content-Security-Policy : script-src https://test.com

2. X-Frame-Options
clickjacking(사용자의 클릭을 훔쳐 엉뚱한 곳을 클릭하게 만드는 공격 기법) 방지 기능 포함 사용 방법은 다음과 같이 3가지가 있다.
 - X-Frame-Options : Deny (모두 표시 거부)
 - X-Frame-Options : SAMEORIGIN (같은 origin 일 경우에만 허용)
 - X-Frame-Options : ALLOW FROM http://test.com (지정한 origin에 한하여 허용)

3. X-Content-Type-Options
jpg 확장자로 js 파일을 올려 우회를 한 후에 script 태그에 src로 넣는 수법을 방지하는 헤더
이 헤더를 넣으면 MIMETYPE과 다르게 사용하지 못하게 한다. nosciff를 넣어주면 활성화 된다.
 - X-Content-Type-Options: nosniff

4. (HTTP) Strict-Transport-Security (HSTS)
해당 해더를 받게 되면 브라우저는 다음에 사이트에 접속할 때 https://를 붙이지 않더라도 웹브라우저가 https로 접속하는 기능이다. 이와 같은 방법으로 SSL http, SSL strip 공격을 피할 수 있게 된다.
 - Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
  => includeSubDomains를 넣어주면 서브 도메인들도 적용이 된다.

5. Cache-control
악의적인 사용자가 브라우저 히스토리를 악용 할 수 있기 때문에 브라우저가 웹페이지 컨텐츠를 캐싱하지 않도록 설정한다.
 - Cache-Control: no-cache

6. X-XSS-Protection
웹 브라우저의 내장 XSS Filter를 사용하도록 하는 옵션
- X-XSS-Protection; 1; mode=block


##### XSS로 인한 쿠키 탈취 방지
1). httpOnly 설정
브라우저에서 쿠키에 접근할 수 없도록 제한
- PHP
5.2 이상 버전
setcookie("쿠키명","쿠키값",0,"/","domain_name",false, true);
5.2 이하 버전
header("Set-Cookie: 쿠키명=쿠키값; httpOnly");

2). Secure Cookies 설정
https를 통해 암호화되어야 할 정보가 개발자의 부주의로 http로 전송이 될 경우 정보가 유출될 수 있음.
header("Set-Cookie: 쿠키명=쿠키값; path=/; secure");


##### SQL Injection 대응 방안 ( prepared statement )
-> PreparedStatement를 통해 원천 차단 가능
1). 첫번째
PreparedStatement test = conn.prepareStatement("select count(*) from member where userid=? and password=?");
test.setString(1, userid);
test.setString(2, password);
ResultSet rs = stmt.executeQuery();

2). 두번째
$dbc= mysqli_connect(...생략...);
$query= "SELECT * FROM user_list WHERE id='@0' and pw='@1'";
$data= array($user_id, $user_pw);
good_mysqli_query($dbc,$query,$data);
-> @0과 @1은 각각 $data[0], $data[1]을 의미
=> 사용자가 데이터를 입력한 후 데이터가 데이터베이스에서 처리가 될 때 까지 모든 과정에서 
데이터는 쿼리문과 분리되어지기 때문에 데이터에 의해 쿼리문이 변조될 수 없어서 sql injection이 불가능해짐.


##### suricata
- content : 문자열 찾을때 사용
- nocase : 대/소문자 구별하지 않을때 사용
- offset : 패킷에서 문자열을 탐색 시작할 위치 지정(0부터 시작)
- depth : 패킷에서 문자열 탐색을 종료할 위치 지정
- distance : 이전 content에 매칭된 경우, 패턴 매칭을 시작할 위치를 지정(0부터 시작)
- within : 이전 content에 매칭된 경우, 패턴 매칭을 끝 낼 상대 위치 지정
- sid : 시그니처의 ID를 지정
- rev : 규칙의 버전 번호를 가르킴(SID와 함께 쓰인다)
- flow
to_server : 서버에게 전송된 패킷일 때 활성화
from_server : 서버로부터 전송된 패킷일 때 활성화
to_client : 클라이언트에게 전송된 패킬일 때 활성화
from_client : 클라이언트로 전송된 패킷일 때 활성화
only_stream : 재구성된 패킷 또는 연결이 맺어진 스트림에 속한 패킷일 때 활성화
established : 연결이 수립된 TCP 연결 또는 세션에 속한 패킷일 때 활성화
stateless : 상태와 관계없이 규칙을 활성화 할 때

※ suricata rules flowbits
하나의 Flow에 여러 패킷이 있을 때, suricata는 이 flow들을 memory에 남겨둔다.
독립 된 패킷 내의 Data가 아니라 특정 Flow 내의 패킷 Data를 검사할 때 사용한다.
- Action의 종류
1). set : 현재 Flow의 해당 Condition을 set 한다.
2). isset : 해당 Condition이 set 되어 있을 경우 Alert을 생성한다.
3). toggle : 해당 Condition의 상태를 반전한다. set <-> unset
4). unset : 현재 Flow의 해당 Condition을 unset한다.
5). isnotset : 해당 Condition이 Set 되어 있지 않을 경우 Alert을 생성한다.
6). noalert : 이 Rule에 대하여 Alert을 생성하지 않는다. 

