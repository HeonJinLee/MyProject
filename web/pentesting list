	오류구문 진단 테스트(입력 검증과 출력 테스트)
	"><svg/onload=prompt(5);>{{7*7}}
	
	'';!--"/<XSS>=&{()}
	
	1. SQL Injection
	- DB에서 사용하는 SQL 구문을 통해 의도하지 않은 요청이 발생하면 취약점 발생(SQLmap)-> 시큐어 코딩 필요(특수문자 필터링)

	# mongo db injection
	or 1 = 1 ====> ||  1==1
	{ $ne: 1 }
	|| 1==1
	{$gt: ''}
	[$ne]=1
	';sleep(5000);

	# mysql injection
	no=1 order by 1--%20
	no=1 union select 1,2,version()--%20
	no=1 and 1 = 1#
	no=1' and 'a'='a
	no=-1'
	no=1^0
	no=1 and substring(version(),1,1)>'5'
	no=1' and if(ascii(substr(pw,1,1))<=120,sleep(1),0)#
	no=1' or (sleep(right(left(pw),1,1)))#
	no=1' union select 1,2,NULL,(select version()),NULL--%20
	no=1 and ascii(substr((select table_name from information_schema.tables limit 0, 1),1,1)) = 65;

	2. Command Injection
	- 시스템 명령을 호출하는 인자값을 조작하여 운영체제 명령어 등의 삽입 및 실행하는 취약점->입력값 검증없이 실행코드에 입력값이 들어갈 시 취약점 발생하므로 입력값 검증 필요(;, |, & 필터링 필요) 
	ex). ?a=test; ipconfig  ,  a=ipconfig ,  a=test&ipconfig, a = test | ipconfig
	String str = System.getProperty("dir")Runtime rt = Runtime.getRuntime();
	Process proc = rt.exec("cmd.exe /c dir " + dir);
	
	3. Xpath Injection
	- 공격은 SQL Injection과 유사한 방법으로 접근하면 됨
	-> StringEscapeUtils.escapeXml(변수); 를 사용하면 특수문자를 제거한 후 XML 포맷으로 변환해 줘서 Xpath Injection에서 사용되는 공격 문자열을 무력화 시킬 수 있음. (java)-> 필터링 : \, (, .., /
	
	4. CRLF Injection
	- 입력되는 입력값을 검증하지 않고 다시 클라이언트에 전송해주는 경우 파라미터 내에 CR, LF 가 존재하면 HTTP응답이 분리되어 공격이 발생할 수 있음.
	
	# 유형은 4가지 정도의 사례가 존재
	1). 쿠키값(cookieSink)을 응답헤더에 추가하는 경우
	response.addCookie(cookieSink);
	
	2). 헤더값에 외부 입력값(data 변수)을 추가하는 경우
	response.addHeader("Location", "/author.jsp?lang="+data);
	
	3). 헤더값에 외부 입력값(data)을 덮어쓰는 경우
	response.setHeader("Location", "/author.jsp?lang="+data);
	
	4). 로그에 외부 변수 정보를 삽입하는 경우
	logger.info("Previous page from request was: " + previousPage)
	
	5. Classic Buffer Overflow
	- 데이터가 저장되는 공간이나 정의된 크기보다 큰 데이터를 저장하는 경우 오버플로우가 일어나 리턴값을 조작 가능하게 되면 임의의 명령을 실행할 수 있음.
	-> 길이값을 buffer에 맞게 정확히 할당해주어야 함
	ex). 입력 값에 요청에 무작위 값을 삽입하여 오류가 발생해 취약점 체크
	6. Cross Site Script
	- 외부 입력값에 삽입되는 스크립트에 대해 필터링이나 검증 없이 그대로 스크립트를 출력하게 되는 경우 취약점이 발생할 수 있음.
	ex). 
	" onmousemove=alert(1) t="
	<img src=x onerror='var xss="ale"+"rt(do"+"cume"+"nt.co"+"okie)";eval(xss);'>
	%2500%27onmouseover=%27window.stop%28%29;alert%28document.domain%29%27style=%27font-size:1000px;background-color:red%27
	<IMG SRC=javascript:alert('XSS')>
	<img src=asdf onerror=alert(document.cookie)>
	<IMG SRC=# onmouseover="alert('xxs')">
	<IMG SRC= onmouseover="alert('xxs')">
	<IMG onmouseover="alert('xxs')">
=> JSP스크립트 표현식, EL(Expression Language)는 XSS가 발생가능하나 JSTL 표현식은 XSS가 발생하지 않음
-> 필터링 : <, >, script, iframe, javascript, 스크립트 구문들

	5. Missing authentication for critical function
	- 특정 명령 실행 시 특정 사용자가 권한을 가지고 있는지 검증 유무 - 중요정보(계좌이체정보, 개인정보)를 열람 할 때 발생하는 취약점
	-> 특정 사용자가 권한을 가지고 있는지 검증이 적절히 이루어져야 함-> 안전하다고 확인된 프레임워크나 라이브러리를 사용해야 함.

	6. Missing authorization
	- 적절한 인증이 수행되지 않는 기능을 사용자가 악용-> 적절한 인증이 수행되어야 함

	7. Use of Hard-coded Credentials
	- 소스코드 내에 중요정보(계정 및 암호 등)가 하드코딩 된 취약점-> 중요정보가 하드코딩 되어 있으면 소스코드가 유출되었을때 2차 피해 발생 가능성 높아짐

	8. Missing Encryption of Sensitive Data
	- 중요정보를 암호화없이 저장하거나 전송함을 의미-> 중요정보는 암호화 되어야 하고, 패스워드는 해시화 하여 보관하여야 함.

	9. Unrestricted upload of file with dangerous type
	- 실행 가능한 파일을 업로드하고 실행하여 웹 서버를 장악하는 행위-> 웹쉘을 업로드 하지 못하도록 확장자 필터링-> htaccess 등으로 우회를 못하게 하여야 함.

	10. Reliance on untrusted inputs in a security decision
	- 외부의 의심스런 입력 값을 권한할당 등에 사용함을 의미(응용프로그램의 보안결정이 입력값의 내용에 의지하는 경우에 발생하는 취약점)-> 시스템의 상태정보와 중요한 정보는 서버에만 저장-> 중요한 정보를 클라이언트 쪽에 저장할 경우, 암호화와 무결성 검사를 거친 데이터만 저장

	11. Execution with Unnecessary privileges
	- 필요 권한 이상의 권한을 할당받은 소프트웨어의 경우 만약 취약점이 존재하면 심각한 문제가 생길 수 있음-> 필요한 기능만 프로그램 내에 내장하여야 2차 피해가 발생하지 않음

	12. Cross-Site Request Forgery(CSRF)
	- 악의적인 스크립트를 통해 일반사용자가 공격자를 대신하여 특정행동을 수행하는 기법-> 특수문자 필터링 필요

	13. Improper Limitation of a Pathname to a Restricted Directory
	- 입력값(../../../)을 통해 시스템에 접근하기 위한 경로를 삽입하여 내부 시스템 정보에 접근하는 취약점
	-> ./, ../, ..\\, \\\\ 등의 값을 입력하지 못하도록 필터링-> 디렉터리 리스팅을 못하도록 서버 설정
	14. Download of Code Without Integrity Check
	- 외부 사이트에서 사용되는 스크립트 및 파일 등은 원래 사이트에서 가져오는지와 원본코드가 변조되었는지 검증 (외부에서 불러오는 페이지의 경우 드라이브 바이 다운로드나 피싱 사이트가 발생할 수 있음)
	-> 외부 사이트가 변조되지 않았는지 검증 후 사용 필요
	15. Incorrect Authorization
	- 잘못된 권한으로 인한 정보유출 등의 취약점ex). 특정 쿠키 값이 포함되어 있으면 권한 상승if($user == 'admin')-> 쿠키내에 admin이라는 문자가 존재하면 권한 상승이 발생할 수 있음

	16. Inclusion of Functionality from Untrusted Control Sphere
	- 외부 사이트에서 가져온 기능을 검증없이 사용하는 경우 악의적인 외부 사이트의 스크립트를 사용자에게 실행시킬 수 있는 취약점ex). <iframe src="hxxp://vuln.com">

	17. Incorrect Permission Assignment for Critical Resource
	- 특정 리소스(파일, 디렉터리)에 대한 권한을 기본권한 등으로 할당하는 경우 임의의 사용자가 파일읽기, 수정 및 삭제의 문제점을 가질 수 있음

	18. Use of Potentially Dangerous Function
	- 코딩때 사용되는 취약한 함수(시큐어 코딩 필요)ex). strcpy printf, puts 등

	19. Use of Broken or Risky Cryptographic Algorithm
	- 취약한 암호화 알고리즘을 사용하는 경우, 중요정보 노출의 위험성ex). 깨진적이 있는 암호화알고리즘 및 해시알고리즘을 사용할 경우 취약

	20. Incorrect Calculation of Buffer Size
	- 소프트웨어가 할당된 버퍼를 사용할 때, 사용될 사이즈를 정확하게 계산하지 않고 사용하면 버퍼오버플로우가 발생되는 취약점-> 버퍼사이즈를 정확히 계산 후 사용해야 함

	21. Improper Restriction of Excessive Authentication Attemps
	- Brute Force에 대한 차단 기능을 제공하지 않을때
	-> 캡차나 임계치 차단 필요
	
	22. URL Redirection to Untrusted Site
	- 페이지에서 제공되는 다른 도메인으로의 분기기능은 피싱사이트로의 유도를 할 수 있기 때문에 사용시 주의 필요-> RFI 공격발생 할 수 있음(받은값을 검증없이 그대로 Location이나 include함수에 넣게되면 취약해짐)

	23. Uncontrolled Format String
	- %x, %p, %n, %d와 같은 포맷 스트링을 사용하여 공격 가능(%n와 %hn을 통해 입력길이를 계산해서 주소값 변조하여 취약점 공격)
	-> printf(buf)와 같은 방법으로 변수를 읽어오면 취약점 발생 (시큐어 코딩 필수)
	
	24. Integer Overflow or Wraparound
	- 데이터 타입에 따른 Interger 값에서 다음숫자로 넘어가게되면 공격이 발생할 수 있음
	25. Use of a One-Way Hash without a Salt
	- Salt 값을 사용하지 않고 해시 알고리즘을 사용하는 경우, rainbow attack에 취약할 수 있음.-> 임의의 salt를 사용하여 해시알고리즘을 사용하면 보다 더 겹칠 확률이 낮아짐
