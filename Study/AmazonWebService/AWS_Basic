# Amazon Linux에 nginx 서버 구축
1) aws에서는 extra 저장소 관리를 위해 amazon-linux-extras 명령어가 추가되었음
amazon-linux-extras

2) 패키지를 사용하려면 install으로 저장소 이름을 지정하여 설치
amazon-linux-extras install python3 php7.3 nginx1

3) 설치된 내역 확인
amazon-linux-extras

4) nginx 서버한개를 AMI 이미징하고 똑같은 EC2 인스턴스 생성하였음

5) 로드밸런서 탭에서 ELB 로드밸런싱 셋팅을 하여 80을 원하는 IP에만 할당을 해줬으나 원하는 IP에만 셋팅을 하면 로드밸런서에 연동이 되지 않음
- 시큐리티 그룹으로 any 80 포트 오픈을 해주니까 정상적으로 로드밸런서와 연동이 되어졌고 DNS name에 있는 주소를 통해서 접속이 가능하게 변경되었음
-> 다시 시큐리티 그룹에서 80포트를 타이트하게 설정하면 로드밸런싱에서 헬스 체크가 되지 않음

6) ELB 아랫단 서버 구조를 다르게해서 테스트를 해보았을때 정상적으로 테스트가 되었음
- 접근을 지속적으로 시도하면 번갈아가며 화면이 나오고 로그도 찍혔음 (1:1 비중으로 분산되는 것으로 보임)
-> 부하테스트 ab -n 100 -c 10 http://webserver-289077111.ap-northeast-2.elb.amazonaws.com/index.php

# AutoScailing 만들기
1) Launch Configuration 설정 (거의 EC2 인스턴스 만드는 과정임)
2) Auto Scailing 그룹 생성
- 고급 세부 정보에서 오토스케일링이 되면 로드밸런싱 설정을 할 수 있음
- 조정 정책을 사용하여 이 그룹의 용량 조정 설정을 통해 상세 설정 가능 (그룹 크기 증가, 그룹 크기 감소 설정)
3) 활동 기록에 로그를 확인해보니 에러가 지속적으로 발생하고 있어서 서브넷 설정을 추가해주니 인스턴스가 기동 되었음

# ALB 구성
1) Configure Routing 
- Target group (타겟을 어떻게 내릴지 그룹을 지어서 설정하는것으로 보임)
프로토콜과 포트번호는 ALB와 Server 사이에 발생할 네트워크 통신에 대한 설정

2) Register Targets - 타겟 등록하기 (위에서 만든 타겟그룹에서 실제 타겟팅될 대상을 선정)
- Instances 에서 인스턴스를 선택한 다음 Add to registered 누르면 상단에 Registered targets 에 기록이 된다.
(1) 타겟을 설정하기 전 포트번호를 확인
(2) 원하는 타겟을 설정

3) 이것도 따라 구축을 해봤는데 안되서 시큐리티 그룹을 80으로 전체 오픈해주니까 정상적으로 alb 연동 되었고 새로고침 할때마다 번갈아가며 접근함
- ELB와 다른점은 대상 그룹탭에 대상그룹이 확인가능함 (ELB는 로드밸런서 탭에서 헬스체크 확인가능)

# NLB 구성
- 처음에 로드밸런서 구성할 때부터 조금 다름
1) 기본 구성, 리스너, 가용 영역(서브넷)

##### S3를 구성해보고 정책 설정 내용

- 퍼블릭 액세스 차단(버킷 설정) : 싹다 액세스 차단으로 체크한 상태에서 버킷 정책을 설정해줘도 되는 것 같음
1) 새 ACL(액세스 제어 목록)을 통해 부여된 버킷 및 객체에 대한 퍼블릭 액세스 차단
2) 임의의 ACL(액세스 제어 목록)을 통해 부여된 버킷 및 객체에 대한 퍼블릭 액세스 차단
3) 새 퍼블릭 버킷 정책을 통해 부여된 버킷 및 객체에 대한 퍼블릭 액세스 차단
4) 임의의 퍼블릭 버킷 정책을 통해 부여된 버킷 및 객체에 대한 퍼블릭 및 교차 계정 액세스 차단
- 기본적으로 작업할 때 모두 액세스 차단으로 설정을 한뒤에 한개씩 트러블 슈팅을 해가며 권한을 풀어줘야 안전해 보임
-> 전부 차단을 했을때도 버킷 정책을 잘 설정하니 정상적으로 잘 동작하였음

- Deny 정책을 사용하여 NotIpAddress 객체에 개방해주기를 원하는 IP를 넣어주면 화이트리스트 정책으로 동작함
{
    "Version": "2012-10-17",
    "Id": "Policy1574334282975",
    "Statement": [
        {
            "Sid": "Stmt1574334276739",
            "Effect": "Deny",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::s3-heonjin/*",
            "Condition": {
                "NotIpAddress": {
                    "aws:SourceIp": "125.141.120.103/32"
                }
            }
        }
    ]
}

1) Action에 대한 항목은 Bucket에 대해 어떤 작업을 허용할 지에 대한 내용 
예를 들어 객체에 대해 읽기 작업을 하는 경우에는 S3:getObject;라 명세하고 쓰기 작업을 하는 경우 s3:putObejct; 와 같이 사용. 
여러 기능에 대해서 명세할 경우 구분자로 ";"를 사용. (전체 액션을 선택할거면 s3:* 로 설정하면 됨)

2) Effect는 사용자가 특정 작업을 요청하는 경우의 결과
버킷에 대한 명령을 허락(allow)하거나 거부(deny) 할 수 있으며, 특정 사용자에 대해 명령을 제한하거나, 허용하는 식으로 사용이 가능함

3) Resource는 대상이 되는 Bucket에 대한 명세를 진행함

4) Principal은 특정 사용자에 대해 명세해주는 작업을 함
