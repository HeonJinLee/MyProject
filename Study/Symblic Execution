# Concrete Execution 과 Symbolic Execution의 차이
	- Concrete Execution은 우리가 일상적으로 프로그램을 실행하는 것
	- 구체적인 입력값이 있고, 이 입력값을 기반으로 연산을 수행해서 구체적인 출력값이 나타남
	- Symbolic Execution은 입력을 구체적인 값으로 주는 것이 아니고 임의의 값을 나타내는 심볼을 주고 프로그램을 실행

# Symbolic Execution
	- 프로그램에 대한 일반적인 입력말고 임의의 값을 나타내는 심볼을 사용
	- 입력 기호에 대해 값이 기호식이 될 수 있다는 점을 제외하면 정상적인 실행으로 진행됨
	- 프로그램은 일련의 입력에 대해 상징적으로 실행되므로 각각의 기호 실행 결과는 많은 정상 테스트 사례와 동일 할 수 있음

	1. z3 문법1). 미지수 선언 정수 : Int()2). 미지수 선언 실수 : Real()3). 미지수 비트벡터 : BitVec()4). Solver 객체 생성 함수 : Solver()5). 수식 추가하는 함수 : add()  6). 값이 존재하는지 확인하는 함수 : check()7). 값이 존재하는 경우 값을 구하는 함수 : model()8). 수식을 추가하는 함수 : append(), assert_exprs(), insert()9). 추가된 수식을 반환하는 함수 : asssertions()10). 수식을 넣고 빼고 할 수 있음 : push(), pop()11). check() 함수의 반환값이 unknown인 이유를 알려줌 : reason_unknown()12). 추가한 수식을 초기화시키는 함수 : reset()

# 예제 1 (정수 선언)
>>> import z3
>>> x = z3.Int('x')
>>> y = z3.Int('y')
>>> s = z3.Solver()
>>> s.add(x+y > 10)
>>> s.add(x*y == 20)
>>> s.check()
sat
>>> s.model()
[y = 20, x = 1]
>>> s.add(x!=1)
>>> s.check()
sat
>>> s.model()
[y = 1, x = 20]
>>> s.add(y!=1)
>>> s.check()
sat
>>> s.model()
[y = 10, x = 2]

# 예제 2(실수 선언)
>>> import z3
>>> x = z3.Real('x')
>>> y = z3.Real('y')
>>> s = z3.Solver()
>>> s.add(x**2 + y**2 == 5)
>>> s.add(x**4 == 4)
>>> s.check()
sat
>>> s.model()
[x = -1.4142135623?, y = -1.7320508075?]
>>> z3.set_option(precision=5)
>>> s.model()
[x = -1.41421?, y = -1.73205?]

# 예제 3(비트벡터 선언)
>>> import z3
>>> x = z3.BitVec('x', 8)
>>> y = z3.BitVec('y', 8)
>>> s = z3.Solver()
>>> s.add(x+y*3 ==5) 
>>> s.add(x*7 ==14)
>>> s.check()
sat
>>> s.model()
[x = 2, y = 1]

# 여러 문법 종합 예제
>>> import z3
>>> x, y, z = z3.Reals('x y z')
>>> s = z3.Solver()
>>> s.add(x>1, y>1, x+y==3, z-x<10)
>>> s.check()
sat
>>> m = s.model()
>>> for i in m.decls():
...    print ("%s = %s" % (i.name(), m[i]))
... 
z = 0
y = 7/4
x = 5/4

=========================================================================

Int a = α, b = β, c = γ; // symbolic
 int x = 0, y = 0, z = 0;
 if (a) {
 x = -2;
 }
 if (b < 5) {
 if (!a && c) { y = 1; }
 z = 2;
}
assert(x+y+z!=3)

--------------------------------------------------------------------------------------------------------------------------------

import z3
 
a = z3.Int('a')
b = z3.Int('b')
c = z3.Int('c')
x = 0
y = 0
z = 0
s = z3.Solver()
 
x = z3.If(a != 0,-2,x)
y = z3.If(z3.And(b < 5, a == 0, c != 0), 1, y)
z = z3.If(b < 5, 2, z)
 
s.add(x+y+z == 3)
print s.to_smt2()

--------------------------------------------------------------------------------------------------------------------------------

# angr 공부
1). angr.Project : angr 모듈의 메인 클래스이다. 바이너리의 관계를 설정하고 그에 대한 분석을 수행하기 위해 사용된다.
2). project.factory : angr에 있는 class들을 사용할 수 있도록 정의해놓은 곳이다.
   project.factory.blank_state() : 빈 state 생성
   project.factory.entry_state() : entrypoint에서의 state 생성(즉, main에서 부터 시작)
   project.factory.full_init_state() : init에서 시작
   proj.factory.call_state() : 특정 함수에서 시작
    -> 위 생성자들은 addr인수로 정확한 위치지정(메모리 주소)이 가능,
	   프로그램이 인자값을 받는 경우 entry_state나 full_init_state를 통해 인자값을 제공해야 함
3). project.factory.simgr, project.factory.simulation_manager
   거의 대부분의 angr 리버싱 문제에서 등장하는 명령이다. symbolic execution을 제어하고 state 공간 탐색을 위한 알고리즘을 적용한다.
   ex). simgr = project.factory.simgr(state)
   factory.simulation_manager() : Control Symbolic Execution을 가능하게 하고 프로그램의 state space를 찾기 위해 전략들을 찾을 수 있다.
explore(find=(찾을주소), avoid(회피주소)) : 찾을 주소와 회피할 주소를 언급해준다.
found.posix.dumps(0) 은 표준 입력을 통해 저장된 정보를 반환
found.posix.dumps(1) 은 표준 출력을 통해 저장된 정보를 반환
found.posix.dumps(2) 은 표준 에러을 통해 저장된 정보를 반환
found.posix.dumps(3) 은 파일 관련 저장된 정보를 반환
